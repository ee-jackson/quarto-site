{
  "hash": "9b0ab2784fc4d5a933b6b3f17bbc6632",
  "result": {
    "markdown": "---\ntitle: \"Searching for spring: how to get data from the iNaturalist API in R\"\nimage: featured.png\ndate: 2021-04-06\ncategories: \n  - R\nlicense: \"CC BY\"\naliases: \n  - ../searching-for-spring/\n---\n\n\n[iNaturalist](https://www.inaturalist.org) is an online community where people can record and share observations. We have been using iNaturalist in our group for student projects. It's proved a great way to teach how to collect and analyse data while the lab and field have been off-limits. To find a way to make data collection easier, I have been playing around with [iNaturalist's API](https://api.inaturalist.org/v1/docs/).\n\nIt has been a long, dark winter for those of us under lockdown in the UK and to give myself something to look forward to, I decided to look into when we might expect to see the first Spring bulbs emerging.\n\niNaturalist does have a [bulk download facility](https://www.inaturalist.org/observations/export), but you can't pull the data directly into R, and I want to filter the data by `term_id`, which is not an option when using the export facility.\n\n\n::: {.cell}\n\n:::\n\n\nI'm going to use functions from [{httr}](https://github.com/r-lib/httr) to query the API, and [{jsonlite}](https://github.com/jeroen/jsonlite) to deal with the ugly json file that the API will return ðŸ™…\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\nlibrary(\"httr\")\nlibrary(\"jsonlite\")\n```\n:::\n\n\nThe API will only give us 200 records at a time, this is the max number of records per page, so I'm writing a function that I can use to repeatedly hit the server. The call I'm using includes filters to pull out the data I want to look at. Briefly, I'm filtering for observations of plants `iconic_taxa=Plantae`, in the UK `place_id=6857`, which have the annotations Plant Phenology `term_id=12`, and Flowering `term_value_id=13`. Annotations are [a little different](https://www.inaturalist.org/pages/annotations) to Observation Fields in iNaturalist. Observation Fields can be created and added by anyone, whereas Annotations are maintained by iNaturalist administrators. This means I will probably pull fewer observations, but they might be more reliable.\n\nUsually you'd use the `page` parameter to cycle through each page and retrieve all the results, however, if there are more than 10k results, [iNaturalist recommends](https://www.inaturalist.org/pages/api+recommended+practices) you sort by ascending ID `order_by=id&order=asc`, and use the `id_above` parameter set to the ID of the record in the last batch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_obs <- function(max_id){\n\n\t# an API call that has \"id_above =\" at the end\n\tcall <- paste(\"https://api.inaturalist.org/v1/observations?\n\t              iconic_taxa=Plantae&term_id=12&term_value_id=13&place_id=6857\n\t              &d1=2017-01-01&per_page=200&order_by=id&order=asc&id_above=\", \n\t              max_id, sep=\"\")\n\t \n\t# making the API call, parsing it to JSON and then flatten\n\tGET(url = call) %>%\n\tcontent(as = \"text\", encoding = \"UTF-8\") %>%\n\tfromJSON(flatten = TRUE) -> get_call_json\n\t \n\t# this grabs just the data we want and makes it a data frame\n\tas.data.frame(get_call_json$results)\n\t\n}\n```\n:::\n\n\nNow that we have our function, I'm going to use it to pull the first page of results by setting `max_id` to zero. Once we've got that, we can create a list with our first page of results as the first item. I can then use a while loop to continually hit the API and append each new page to the list. The loop will run while the number of rows in a page is equal to 200. The last page of results will have less than 200 rows, and the loop will stop running. I've also told it to print the page number so I can see how it's progressing, although I won't print all that output in this post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the first page\nobs <- get_obs(max_id = 0)\nmax_id <- max(obs[[\"id\"]])\nthisisalist <- list(page_1 = obs)\npage <- 1\n\nwhile (nrow(obs) == 200) {\n\tSys.sleep(0.5)\n\tpage <- page + 1\n\tpage_count <- paste(\"page\", page, sep = \"_\")\n\tobs <- get_obs(max_id = max_id)\n\tthisisalist[[page_count]] <- obs\n\tmax_id <- max(obs[[\"id\"]])\n\tprint(page_count)\n\tprint(max_id)\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can now bind all the elements of the list into one big dataframe and explore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthisisnotalist <- bind_rows(thisisalist)\ndim(thisisnotalist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21836   160\n```\n:::\n:::\n\n\nThere are *a lot* of different variables! I'm interested in `observed_on`. Let's convert it to date format and do some quick overview plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthisisnotalist %>%\n\tmutate(observed_on_date = as.Date(observed_on, \"%Y-%m-%d\"),\n\t day_of_year = as.numeric(strftime(observed_on_date, \n\t format = \"%j\")) ) -> flower_obs\n\nflower_obs %>%\n\tggplot(aes(x = observed_on_date)) +\n\tgeom_bar(color = \"#264653\") +\n\tscale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n\tlabs(x = \"Day observed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_date-1.png){width=672}\n:::\n:::\n\n\nThe number of observations recorded has increased each year, probably due to iNaturalist gaining popularity. There are also many more observations in the summer months than in the winter. We can get a better look at this pattern plotting by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflower_obs %>%\n  filter(observed_on_details.year < 2021) %>% # we don't have the full data for this yr\n\tggplot(aes(x= as.factor(observed_on_details.month))) +\n\tgeom_bar(fill = \"grey90\", color = \"#264653\") +\n\tlabs(x= \"Month observed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_month-1.png){width=672}\n:::\n:::\n\n\nThere's a peak in April with observations slowly dropping throughout the year. I didn't quite expect that. I would have assumed that observations of flowering plants would be relatively flat from April to August as different plants come into flower at different points throughout the spring and summer. Perhaps this is due to some kind of sampling bias in how people are recording observations. Let's have a look at which plants are the first to flower.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflower_obs %>%\n\tgroup_by(taxon.name, taxon.preferred_common_name) %>%\n\tsummarise(median_day = median(day_of_year), n_obs = n()) %>%\n\tungroup() %>%\n\t# filter to sp with more than 20 observations \n\t# to make sure we get a representitive sample size\n\tfilter(n_obs > 20) %>% \n\tslice_min(order_by = median_day, n = 15) %>%\n\tknitr::kable()\n```\n\n::: {.cell-output-display}\n|taxon.name                |taxon.preferred_common_name | median_day| n_obs|\n|:-------------------------|:---------------------------|----------:|-----:|\n|Petasites fragrans        |Winter Heliotrope           |       29.0|    25|\n|Corylus avellana          |common hazel                |       43.0|    37|\n|Crocus tommasinianus      |Woodland crocus             |       48.0|    22|\n|Galanthus nivalis         |common snowdrop             |       50.0|   208|\n|Cyclamen coum             |Eastern Sowbread            |       55.0|    31|\n|Viburnum tinus            |Laurustinus viburnum        |       58.0|    23|\n|Prunus cerasifera         |Cherry-plum                 |       65.5|    48|\n|Narcissus pseudonarcissus |wild daffodil               |       68.0|    30|\n|Viola odorata             |Sweet violet                |       71.0|    64|\n|Draba verna               |Common Whitlowgrass         |       72.0|    27|\n|Mercurialis perennis      |Dog's Mercury               |       77.0|    39|\n|Cardamine hirsuta         |hairy bittercress           |       77.5|    40|\n|Narcissus                 |daffodils                   |       79.5|    56|\n|Primula vulgaris          |Primrose                    |       82.0|   185|\n|Tussilago farfara         |colt's-foot                 |       82.0|    91|\n:::\n:::\n\n\nI always think of Crocus coming up first, along with Snowdrops, so it's reassuring to see them high up on this list. I think it would be nice to get a visualisation of the emergence of different flowers with the changing seasons. I'm going to choose a few which I know emerge fairly sequentially: Snowdrops (genus = *Galanthus*), Crocus, Daffodils (*Narcissus*), Hyacinths (*Hyacinthoides*), Iris, and finally Cyclamen, which flowers through the winter.\n\nI have to do some fiddling around here with dates to get the x axis labels how I want them. I'm going to change the year for every observation to be 2020, so that data from different years can be grouped together. I also use `floor_date` from [{lubridate}](https://github.com/tidyverse/lubridate) to round dates to the week they were observed. e.g. Tuesday 6th and Thursday 8th would both be rounded down to Sunday 4th. This allows me to plot by week and label by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"lubridate\")\n\nflower_obs %>%\n  filter(str_detect(taxon.name, \"Narcissus\") | \n           str_detect(taxon.name, \"Iris\") | \n           str_detect(taxon.name, \"Crocus\")| \n           str_detect(taxon.name, \"Galanthus\")|\n           str_detect(taxon.name, \"Hyacinthoides\")|\n           str_detect(taxon.name, \"Cyclamen\")) %>% \n  separate(taxon.name, into = c(\"genus\", \"sp\"), sep = \" \") %>%\n  mutate(date = as.Date(paste(2020, strftime(observed_on, format = \"%m-%d\"), \n                              sep=\"-\")) ) %>% \n  mutate(week = floor_date(date, \"week\")) %>%\n  ggplot(aes(x= week, fill = genus)) +\n  geom_bar(position = \"fill\") +\n  scale_x_date(date_breaks = \"1 month\",  expand = c(0,0),\n               date_labels = \"%B\", limits = as.Date(c(\"2020-01-01\", \"2020-12-31\"))) +\n  coord_polar() + \n  scale_fill_manual(\n    values = c(\"#264653\", \"#2A9D8F\", \"#8AB17D\",\n               \"#E9C46A\", \"#F4A261\", \"#E76F51\")) +\n  theme_void(base_size = 9)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_polar-1.png){width=672}\n:::\n:::\n\n\nI feel like this is a really nice one to use `coord_polar()` for. You can see how the months blend into each other, without a break at Dec/Jan. *Narcissus* flowering phenology is well represented here, you can see how it steadily increases to a peak and then dips down again.\n\nBut ok, what about if you live in Edinburgh, are you going to see Daffs on the same day as people in London? Maybe we can see how geography affects flowering observations.\n\nWe want [{sf}](https://github.com/r-spatial/sf) to work with spatial features, [{rnaturalearthdata}](https://github.com/ropensci/rnaturalearthdata) to get a map of the UK, [{rnaturalearth}](https://github.com/ropensci/rnaturalearth) for functions to work with that data and, for fun, [{gganimate}](https://github.com/thomasp85/gganimate).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"sf\")\nlibrary(\"rnaturalearth\")\nlibrary(\"rnaturalearthdata\")\nlibrary(\"gganimate\")\n\n# get a map of the UK as a 'sf' polygon from the natural earth data\nuk_map <- ne_countries(country = \"united kingdom\", scale = 'medium', returnclass = \"sf\")\n\n# filter our data for daffodil observations\n# and extract lattitude and longitude from the 'location' variable\nflower_obs %>%\n\tfilter(str_detect(taxon.name, \"Narcissus\") & mappable == TRUE ) %>%\n\tseparate(location, into = c(\"lat\", \"long\"), sep = \",\") %>%\n\tselect(\"lat\", \"long\", \"day_of_year\") %>%\n\tst_as_sf(coords = c( \"long\",\"lat\"), \n\t\tcrs = 4326, agr = \"constant\")  -> geo_daff\n\nggplot() +\n\tgeom_sf(data = uk_map, fill = \"white\") +\n\tgeom_sf(data = geo_daff, shape = 16, size = 1.5, \n\t\tcolour = \"#8AB17D\") +\n\ttransition_states(as.factor(day_of_year),\n                    state_length = 3) + \n\tshadow_mark(past = TRUE, future = FALSE) +\n\tggtitle(\"Daffodils in flower\\n\n\t\tDay of the year: {closest_state}\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_map-1.gif)\n:::\n:::\n\n\nI was hoping we'd see some kind of wave with flowers appearing in the South first, but alas, maybe there's just not enough data. It looks pretty cool though ðŸ¤·\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}